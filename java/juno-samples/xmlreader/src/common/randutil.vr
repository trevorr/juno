/*
 * Copyright (C) 2005 Newisys, Inc. or its licensors, as applicable.
 *
 * Licensed under the Open Software License version 2.0 (the "License"); you
 * may not use this file except in compliance with the License. You should
 * have received a copy of the License along with this software; if not, you
 * may obtain a copy of the License at
 *
 * http://opensource.org/licenses/osl-2.0.php
 *
 * This software is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 */

#include "log.vrh"

// generates a random integer in the half interval [base,limit)
// DEPRECATED: use urandom_range(limit-1, base)
function bit[31:0] urandomRange(bit[31:0] base, bit[31:0] limit)
{
    urandomRange = random() % (limit - base) + base;
}

#define RANDOM_MASK_BITS 128
#define RandomMask bit[RANDOM_MASK_BITS-1:0]

// Randomly selects a bit index based on a mask
//
// Given a mask with some bits set, this routine returns the index of one of those set bits.  
//
// Example:
// mask = 1100_1010
// count = 4
// return value = {1, 3, 6, 7}
//
// mask - a bit mask
// count - the number of set bits to choose from.
// return value - the index of of one of the set bits chosen randomly.
//
function integer randomFromMask(RandomMask mask, integer count)
{
    integer i, j;

    assert(mask != 0 && count != 0);

    // pick random index in [0,count)
    i = urandom_range(count-1, 0);

    // find i'th set bit in mask
    j = 0;
    while (1) {
        // scan for next set bit in mask
        while (!mask[j]) ++j;

        // break on i'th set bit
        if (i == 0) break;

        --i;
        ++j;
    }

    randomFromMask = j;
}

// Iterates randomly through the specified bits
//
// Given a mask with some bits set, this routine returns the index of one of those set bits. 
// It also changes the count and mask to eliminate that bit from the next iteration.
//
// Example:
// 1st iteration:
//      mask = 1100_1010
//      count = 4
//      return value = 3, from potential values {1, 3, 6, 7}
//
// 2nd iteration:
//      mask = 1100_0010
//      count = 3
//      return value = 7, from potential values {1, 6, 7}
//
// mask - a bit mask
// count - the number of set bits too choose from.
// return value - the index of of one of the set bits chosen randomly.
//
function integer randomIterate(var RandomMask mask, var integer count)
{
    integer index = randomFromMask(mask, count);
    mask[index] = 0;
    --count;
    randomIterate = index;
}

// Generates a mask containing the given number of bits randomly set to 1s and 0s.
//
// Example: 
// count = 8
// return value = {8'b0000_0001, 8'b0000_0010, ..., 8'b1111_1111}
//
// count - the effective size of the mask returned.
// return value - a mask with an effective width of count 
//
function RandomMask randomBits(integer count)
{
    integer pos;

    randomBits = 0;
    for (pos = 0; pos < count; pos += 32) {
        bit[31:0] rand32;

        rand32 = urandom();
        if (count - pos < 32) {
            rand32[31:count - pos] = 0;
        }
        randomBits[pos + 31:pos] = rand32;
    }
}

// Generates a value, "count" bits wide, with [minSet..maxSet] bits randomly set
//
// Example:
// minSet = 2
// maxSet = 5
// count  = 16
// return value = {16'h8110, 16'h0c0e, 16'h4005, ...}
// number of bits set = {2, 3, 5, 6}
//
// count  - the width of the resultant bit mask.
// minSet - the lowest number of bits that will be set.
// maxSet - the highest number of bits that will be set.
// return value - a bit mask that is 'count' bits wide and has between minSet and maxSet bits set, inclusive.
//
function RandomMask randomMask(integer count, integer minSet, integer maxSet)
{
    randomMask = randomMaskSubset(-1, count, minSet, maxSet);
}

// Generates a random subset of a mask with a constrained number of bits set
// 
// Example:
// mask   = 16'b0110_1100_0000_1010
// minSet = 1
// maxSet = 2
// count  = 4
// number of bits set = {1, 2}
// 
// 0110_1100_0000_1010 <- mask
// 0000_1000_0000_0010 <- potential result, 2 bits set
// 0000_0000_0000_1000 <- potential result, 1 bit set
//
// mask   - a starting mask with some set of bits set.
// count  - the number of bits in "mask" that can be used to choose from, starting with the lowest bit set.
// minSet - the lowest number of bits that will be set.
// maxSet - the highest number of bits that will be set.
// return value - a bit mask that is has between minSet and maxSet bits set, inclusive.  If a bit was set
//                in the input mask it can be set in the return value.
//
function RandomMask randomMaskSubset(RandomMask mask, integer count,
    integer minSet, integer maxSet)
{
    integer toSet, i;

    assert(0 <= minSet && minSet <= maxSet && maxSet <= count);

    randomMaskSubset = 0;
    toSet = urandom_range(maxSet, minSet);
    for (i = 0; i < toSet; ++i) {
        randomMaskSubset[randomIterate(mask, count)] = 1;
    }
}

