/*
 * Copyright (C) 2005 Newisys, Inc. or its licensors, as applicable.
 *
 * Licensed under the Open Software License version 2.0 (the "License"); you
 * may not use this file except in compliance with the License. You should
 * have received a copy of the License along with this software; if not, you
 * may obtain a copy of the License at
 *
 * http://opensource.org/licenses/osl-2.0.php
 *
 * This software is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 */

#include <VeraListProgram.vrh>
#include "xmlreader.vrh"
#include "xmlinputsource.vrh"
#include "xincludefilter.vrh"
#include "property.vrh"

class MyContentHandler
extends SaxContentHandler
{
    local LogInterface logIntf;
    local SaxLocator locator;

    task new(LogInterface _logIntf)
    {
        logIntf = _logIntf;
    }

    // Receive notification of character data.
    virtual task characters(string chars)
    {
        dump(psprintf("characters: %s", chars));
    }

    // Receive notification of the end of a document.
    virtual task endDocument()
    {
        dump("endDocument");
    }

    // Receive notification of the end of an element.
    virtual task endElement(string namespaceURI, string localName, string qName)
    {
        dump(psprintf("endElement: namespaceURI=%s localName=%s qName=%s",
            namespaceURI, localName, qName));
    }

    // End the scope of a prefix-URI mapping.
    virtual task endPrefixMapping(string prefix)
    {
        dump(psprintf("endPrefixMapping: %s", prefix));
    }

    // Receive notification of ignorable whitespace in element content.
    virtual task ignorableWhitespace(string chars)
    {
        dump(psprintf("ignorableWhitespace: %s", chars));
    }

    // Receive notification of a processing instruction.
    virtual task processingInstruction(string target, string data)
    {
        dump(psprintf("processingInstruction: target=%s data=%s", target, data));
    }

    // Receive an object for locating the origin of SAX document events.
    virtual task setDocumentLocator(SaxLocator _locator)
    {
        locator = _locator;
        dump("setDocumentLocator");
    }

    // Receive notification of a skipped entity.
    virtual task skippedEntity(string name)
    {
        dump(psprintf("skippedEntity: %s", name));
    }

    // Receive notification of the beginning of a document.
    virtual task startDocument()
    {
        dump("startDocument");
    }

    // Receive notification of the beginning of an element.
    virtual task startElement(string namespaceURI, string localName, string qName, SaxAttributes atts)
    {
        integer count, i;

        dump(psprintf("startElement: namespaceURI=%s localName=%s qName=%s",
            namespaceURI, localName, qName));

        count = atts.getLength();
        for (i = 0; i < count; ++i) {
            dump(psprintf("  attribute[%0d]: namespaceURI=%s localName=%s qName=%s type=%s value=%s",
                i, atts.getURI(i), atts.getLocalName(i), atts.getQName(i), atts.getType(i), atts.getValue(i)));
        }
    }

    // Begin the scope of a prefix-URI Namespace mapping.
    virtual task startPrefixMapping(string prefix, string uri)
    {
        dump(psprintf("startPrefixMapping: prefix=%s uri=%s", prefix, uri));
    }

    local task dump(string msg)
    {
        string loc;

        if (locator != null) {
            sprintf(loc, "line %0d, column %0d: ",
                locator.getLineNumber(), locator.getColumnNumber());
        }
        logIntf.printLogMsg(LS_DEBUG, { loc, msg });
    }
}

program main
{
    LogInterface logIntf;
    MyContentHandler handler;
    string filename;
    XmlInputSource source;
    XmlReader reader;
    XIncludeContentFilter xinclude;

    logIntf = new("xmlreadertest");
    logIntf.setMinSeverity(LS_DEBUG);
    logIntf.setEchoSeverity(LS_DEBUG);

    handler = new(logIntf);

    filename = getPropStr("filename=", "src/xmlreader/xmlreadertest/test.xml");
    source = getXmlInputSource(filename);

    reader = new;
#ifndef NO_XINCLUDE
    xinclude = new(reader, handler);
    reader.setContentHandler(xinclude);
#else
    reader.setContentHandler(handler);
#endif
    reader.parse(source);
}

