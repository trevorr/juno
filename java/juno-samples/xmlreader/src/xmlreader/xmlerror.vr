/*
 * Copyright (C) 2005 Newisys, Inc. or its licensors, as applicable.
 *
 * Licensed under the Open Software License version 2.0 (the "License"); you
 * may not use this file except in compliance with the License. You should
 * have received a copy of the License along with this software; if not, you
 * may obtain a copy of the License at
 *
 * http://opensource.org/licenses/osl-2.0.php
 *
 * This software is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 */

#include "log.vrh"
#include "sax.vrh"
#include "xmllocator.vrh"

////////////////////////////////////////////////////////////
// XmlError
////////////////////////////////////////////////////////////

class XmlError
extends SaxError
{
    local string message;
    local XmlStaticLocator location;

    task new(string _message, SaxLocator locator)
    {
        message = _message;
        if (locator != null) {
            location = new(
                locator.getPublicId(),
                locator.getSystemId(),
                locator.getLineNumber(),
                locator.getColumnNumber());
        }
    }

    // Returns the message describing the error.
    virtual function string getMessage()
    {
        getMessage = message;
    }

    // Returns the document location of the error.
    virtual function SaxLocator getLocation()
    {
        getLocation = location;
    }

    // Returns a string containing the message and location of the error.
    virtual function string toString()
    {
        toString = message;
        if (location != null) {
            string publicId;
            string systemId;

            publicId = location.getPublicId();
            systemId = location.getSystemId();
            if (publicId != null || systemId != null) {
                toString = { toString, " in " };
                if (publicId != null && systemId != null) {
                    toString = { toString, publicId, " (", systemId, ")" };
                }
                else if (publicId != null) {
                    toString = { toString, publicId };
                }
                else {
                    toString = { toString, systemId };
                }
            }

            toString = { toString, psprintf(" at line %0d, column %0d",
                location.getLineNumber(), location.getColumnNumber()) };
        }
    }
}

////////////////////////////////////////////////////////////
// XmlErrorHandler
////////////////////////////////////////////////////////////

class XmlErrorHandler
extends SaxErrorHandler
{
    local LogInterface logIntf;

    task new(LogInterface _logIntf)
    {
        logIntf = _logIntf;
    }

    // Receive notification of a warning.
    virtual task warning(SaxError exception)
    {
        logIntf.logMsg(LS_WARNING, exception.toString());
    }

    // Receive notification of a recoverable error.
    virtual task error(SaxError exception)
    {
        logIntf.logMsg(LS_ERROR, exception.toString());
    }

    // Receive notification of a non-recoverable error.
    virtual task fatalError(SaxError exception)
    {
        logIntf.logMsg(LS_FATAL, exception.toString());
    }
}

