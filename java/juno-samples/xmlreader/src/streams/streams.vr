/*
 * Copyright (C) 2005 Newisys, Inc. or its licensors, as applicable.
 *
 * Licensed under the Open Software License version 2.0 (the "License"); you
 * may not use this file except in compliance with the License. You should
 * have received a copy of the License along with this software; if not, you
 * may obtain a copy of the License at
 *
 * http://opensource.org/licenses/osl-2.0.php
 *
 * This software is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 */

#include "common.vri"

////////////////////////////////////////////////////////////
// InputStream
////////////////////////////////////////////////////////////

virtual class InputStream
{
    // Reads the next byte of data from the input stream.
    virtual function integer read();

    // Reads the next line of data from the input stream.
    virtual function string readLine()
    {
        string s;

        while (1) {
            integer b;
            string temp;

            b = read();
            if (b == -1 || b == 8'h0A) break;
            temp.bittostr(b);
            s = { s, temp };
        }
        readLine = s;
    }

    // Skips over and discards n bytes of data from this input stream.
    virtual function integer skip(integer n)
    {
        integer i;

        for (i = 0; i < n; ++i) {
            integer b;

            b = read();
            if (b == -1) break;
        }
        skip = i;
    }

    // Closes this input stream and releases any system resources associated with the stream.
    virtual task close() {}
}

////////////////////////////////////////////////////////////
// OutputStream
////////////////////////////////////////////////////////////

virtual class OutputStream
{
    // Writes the specified byte to this output stream.
    virtual task write(integer b);

    // Writes the specified line to this output stream.
    virtual task writeLine(string s)
    {
        integer len, i;

        len = s.len();
        for (i = 0; i < len; ++i) {
            write(s.getc(i));
        }
        write(8'h0A);
    }

    // Flushes this output stream and forces any buffered output bytes to be written out.
    virtual task flush() {}

    // Closes this output stream and releases any system resources associated with this stream.
    virtual task close() {}
}

