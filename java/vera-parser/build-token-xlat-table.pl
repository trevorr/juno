#!/usr/local/bin/perl

use strict;
use warnings;
use IO::File;

$0 =~ /(.*\/)?(.*)/;
my $progname = $2;

die "Syntax: $progname <source constants> <target constants> <output file> <output class>" if $#ARGV != 3;

my $srcconst = shift @ARGV;
my $tgtconst = shift @ARGV;
my $outtable = shift @ARGV;
my $outclass = shift @ARGV;

my %srcmap;
read_constants($srcconst, \%srcmap);

my %tgtmap;
my $tgtpkg;
read_constants($tgtconst, \%tgtmap, \$tgtpkg);

my @outarray;
while (my ($tgtname, $tgtvalue) = each %tgtmap)
{
    die "$tgtname not defined in source constants" if !exists $srcmap{$tgtname};
    my $srcvalue = $srcmap{$tgtname};
    $outarray[$srcvalue] = $tgtvalue;
}

write_mapping($outtable, \@outarray, $tgtpkg, $outclass);

exit 0;

sub read_constants
{
    my $filename = shift;
    my $map_ref = shift or die;
    my $package_ref = shift;

    print "Reading constants from $filename\n";
    my $fh = new IO::File($filename, "r");
    die "$! opening $filename" if !defined($fh);

    while (<$fh>) {
        if (/^\s*int\s*(\w+)\s*=\s*(\d+)\s*;/) {
            $map_ref->{$1} = $2;
        }
        elsif (/^\s*package\s*(\w+(?:\s*\.\s*\w+)*)\s*;/) {
            $$package_ref = $1 if defined($package_ref);
        }
    }
}

sub write_mapping
{
    my $filename = shift;
    my $array_ref = shift or die;
    my $pkg = shift or die;
    my $cls = shift or die;

    print "Writing mapping table to $filename\n";
    my $fh = new IO::File($filename, "w");
    die "$! opening $filename" if !defined($fh);

    print $fh "// Generated by $progname\n\n";
    print $fh "package $pkg;\n\n";
    print $fh "final class $cls\n{\n";
    print $fh "    private static final int[] mapping = {\n";

    my $last = $#$array_ref;
    my $srcvalue;
    my $linepos = 0;
    foreach $srcvalue (0..$last) {
        my $tgtvalue = $array_ref->[$srcvalue];
        $tgtvalue = -1 if !defined $tgtvalue;
        print $fh "       " if $linepos == 0;
        print $fh " $tgtvalue,";
        if (++$linepos == 10) {
            print $fh "\n";
            $linepos = 0;
        }
    }
    if ($linepos > 0) {
        print $fh "\n";
    }

    print $fh "    };\n\n";
    print $fh "    public static int translate(int src) {\n";
    print $fh "        int tgt = mapping[src];\n";
    print $fh "        if (tgt < 0) {\n";
    print $fh "            throw new IllegalArgumentException(\n";
    print $fh "                \"No target token kind for source kind \" + src);\n";
    print $fh "        }\n";
    print $fh "        return tgt;\n";
    print $fh "    }\n";
    print $fh "}\n";
}

